/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WebsiteDemande as PrismaWebsiteDemande } from "@prisma/client";

export class WebsiteDemandeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WebsiteDemandeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.websiteDemande.count(args);
  }

  async websiteDemandes(
    args: Prisma.WebsiteDemandeFindManyArgs
  ): Promise<PrismaWebsiteDemande[]> {
    return this.prisma.websiteDemande.findMany(args);
  }
  async websiteDemande(
    args: Prisma.WebsiteDemandeFindUniqueArgs
  ): Promise<PrismaWebsiteDemande | null> {
    return this.prisma.websiteDemande.findUnique(args);
  }
  async createWebsiteDemande(
    args: Prisma.WebsiteDemandeCreateArgs
  ): Promise<PrismaWebsiteDemande> {
    return this.prisma.websiteDemande.create(args);
  }
  async updateWebsiteDemande(
    args: Prisma.WebsiteDemandeUpdateArgs
  ): Promise<PrismaWebsiteDemande> {
    return this.prisma.websiteDemande.update(args);
  }
  async deleteWebsiteDemande(
    args: Prisma.WebsiteDemandeDeleteArgs
  ): Promise<PrismaWebsiteDemande> {
    return this.prisma.websiteDemande.delete(args);
  }
}
