/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebsiteDemandeService } from "../websiteDemande.service";
import { WebsiteDemandeCreateInput } from "./WebsiteDemandeCreateInput";
import { WebsiteDemande } from "./WebsiteDemande";
import { WebsiteDemandeFindManyArgs } from "./WebsiteDemandeFindManyArgs";
import { WebsiteDemandeWhereUniqueInput } from "./WebsiteDemandeWhereUniqueInput";
import { WebsiteDemandeUpdateInput } from "./WebsiteDemandeUpdateInput";

export class WebsiteDemandeControllerBase {
  constructor(protected readonly service: WebsiteDemandeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebsiteDemande })
  async createWebsiteDemande(
    @common.Body() data: WebsiteDemandeCreateInput
  ): Promise<WebsiteDemande> {
    return await this.service.createWebsiteDemande({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebsiteDemande] })
  @ApiNestedQuery(WebsiteDemandeFindManyArgs)
  async websiteDemandes(
    @common.Req() request: Request
  ): Promise<WebsiteDemande[]> {
    const args = plainToClass(WebsiteDemandeFindManyArgs, request.query);
    return this.service.websiteDemandes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebsiteDemande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async websiteDemande(
    @common.Param() params: WebsiteDemandeWhereUniqueInput
  ): Promise<WebsiteDemande | null> {
    const result = await this.service.websiteDemande({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebsiteDemande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebsiteDemande(
    @common.Param() params: WebsiteDemandeWhereUniqueInput,
    @common.Body() data: WebsiteDemandeUpdateInput
  ): Promise<WebsiteDemande | null> {
    try {
      return await this.service.updateWebsiteDemande({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebsiteDemande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebsiteDemande(
    @common.Param() params: WebsiteDemandeWhereUniqueInput
  ): Promise<WebsiteDemande | null> {
    try {
      return await this.service.deleteWebsiteDemande({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
