/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DemandeService } from "../demande.service";
import { DemandeCreateInput } from "./DemandeCreateInput";
import { Demande } from "./Demande";
import { DemandeFindManyArgs } from "./DemandeFindManyArgs";
import { DemandeWhereUniqueInput } from "./DemandeWhereUniqueInput";
import { DemandeUpdateInput } from "./DemandeUpdateInput";

export class DemandeControllerBase {
  constructor(protected readonly service: DemandeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Demande })
  async createDemande(
    @common.Body() data: DemandeCreateInput
  ): Promise<Demande> {
    return await this.service.createDemande({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Demande] })
  @ApiNestedQuery(DemandeFindManyArgs)
  async demandes(@common.Req() request: Request): Promise<Demande[]> {
    const args = plainToClass(DemandeFindManyArgs, request.query);
    return this.service.demandes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Demande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async demande(
    @common.Param() params: DemandeWhereUniqueInput
  ): Promise<Demande | null> {
    const result = await this.service.demande({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Demande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDemande(
    @common.Param() params: DemandeWhereUniqueInput,
    @common.Body() data: DemandeUpdateInput
  ): Promise<Demande | null> {
    try {
      return await this.service.updateDemande({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Demande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDemande(
    @common.Param() params: DemandeWhereUniqueInput
  ): Promise<Demande | null> {
    try {
      return await this.service.deleteDemande({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
