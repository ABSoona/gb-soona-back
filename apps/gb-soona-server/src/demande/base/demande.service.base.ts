/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Demande as PrismaDemande,
  Aide as PrismaAide,
  DemandeActivity as PrismaDemandeActivity,
  DemandeStatusHistory as PrismaDemandeStatusHistory,
  Document as PrismaDocument,
  Contact as PrismaContact,
} from "@prisma/client";

export class DemandeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DemandeCountArgs, "select">): Promise<number> {
    return this.prisma.demande.count(args);
  }

  async demandes(args: Prisma.DemandeFindManyArgs): Promise<PrismaDemande[]> {
    return this.prisma.demande.findMany(args);
  }
  async demande(
    args: Prisma.DemandeFindUniqueArgs
  ): Promise<PrismaDemande | null> {
    return this.prisma.demande.findUnique(args);
  }
  async createDemande(args: Prisma.DemandeCreateArgs): Promise<PrismaDemande> {
    return this.prisma.demande.create(args);
  }
  async updateDemande(args: Prisma.DemandeUpdateArgs): Promise<PrismaDemande> {
    return this.prisma.demande.update(args);
  }
  async deleteDemande(args: Prisma.DemandeDeleteArgs): Promise<PrismaDemande> {
    return this.prisma.demande.delete(args);
  }

  async findAides(
    parentId: number,
    args: Prisma.AideFindManyArgs
  ): Promise<PrismaAide[]> {
    return this.prisma.demande
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aides(args);
  }

  async findDemandeActivities(
    parentId: number,
    args: Prisma.DemandeActivityFindManyArgs
  ): Promise<PrismaDemandeActivity[]> {
    return this.prisma.demande
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .demandeActivities(args);
  }

  async findDemandeStatusHistories(
    parentId: number,
    args: Prisma.DemandeStatusHistoryFindManyArgs
  ): Promise<PrismaDemandeStatusHistory[]> {
    return this.prisma.demande
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .demandeStatusHistories(args);
  }

  async findDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.demande
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async getContact(parentId: number): Promise<PrismaContact | null> {
    return this.prisma.demande
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }
}
