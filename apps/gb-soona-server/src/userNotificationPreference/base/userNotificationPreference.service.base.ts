/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserNotificationPreference as PrismaUserNotificationPreference,
  User as PrismaUser,
} from "@prisma/client";

export class UserNotificationPreferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserNotificationPreferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userNotificationPreference.count(args);
  }

  async userNotificationPreferences(
    args: Prisma.UserNotificationPreferenceFindManyArgs
  ): Promise<PrismaUserNotificationPreference[]> {
    return this.prisma.userNotificationPreference.findMany(args);
  }
  async userNotificationPreference(
    args: Prisma.UserNotificationPreferenceFindUniqueArgs
  ): Promise<PrismaUserNotificationPreference | null> {
    return this.prisma.userNotificationPreference.findUnique(args);
  }
  async createUserNotificationPreference(
    args: Prisma.UserNotificationPreferenceCreateArgs
  ): Promise<PrismaUserNotificationPreference> {
    return this.prisma.userNotificationPreference.create(args);
  }
  async updateUserNotificationPreference(
    args: Prisma.UserNotificationPreferenceUpdateArgs
  ): Promise<PrismaUserNotificationPreference> {
    return this.prisma.userNotificationPreference.update(args);
  }
  async deleteUserNotificationPreference(
    args: Prisma.UserNotificationPreferenceDeleteArgs
  ): Promise<PrismaUserNotificationPreference> {
    return this.prisma.userNotificationPreference.delete(args);
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.userNotificationPreference
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
