/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Versement } from "./Versement";
import { VersementCountArgs } from "./VersementCountArgs";
import { VersementFindManyArgs } from "./VersementFindManyArgs";
import { VersementFindUniqueArgs } from "./VersementFindUniqueArgs";
import { CreateVersementArgs } from "./CreateVersementArgs";
import { UpdateVersementArgs } from "./UpdateVersementArgs";
import { DeleteVersementArgs } from "./DeleteVersementArgs";
import { Aide } from "../../aide/base/Aide";
import { Document } from "../../document/base/Document";
import { VersementService } from "../versement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Versement)
export class VersementResolverBase {
  constructor(
    protected readonly service: VersementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "read",
    possession: "any",
  })
  async _versementsMeta(
    @graphql.Args() args: VersementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Versement])
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "read",
    possession: "any",
  })
  async versements(
    @graphql.Args() args: VersementFindManyArgs
  ): Promise<Versement[]> {
    return this.service.versements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Versement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "read",
    possession: "own",
  })
  async versement(
    @graphql.Args() args: VersementFindUniqueArgs
  ): Promise<Versement | null> {
    const result = await this.service.versement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Versement)
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "create",
    possession: "any",
  })
  async createVersement(
    @graphql.Args() args: CreateVersementArgs
  ): Promise<Versement> {
    return await this.service.createVersement({
      ...args,
      data: {
        ...args.data,

        aide: {
          connect: args.data.aide,
        },

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Versement)
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "update",
    possession: "any",
  })
  async updateVersement(
    @graphql.Args() args: UpdateVersementArgs
  ): Promise<Versement | null> {
    try {
      return await this.service.updateVersement({
        ...args,
        data: {
          ...args.data,

          aide: {
            connect: args.data.aide,
          },

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Versement)
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "delete",
    possession: "any",
  })
  async deleteVersement(
    @graphql.Args() args: DeleteVersementArgs
  ): Promise<Versement | null> {
    try {
      return await this.service.deleteVersement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Aide, {
    nullable: true,
    name: "aide",
  })
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "read",
    possession: "any",
  })
  async getAide(@graphql.Parent() parent: Versement): Promise<Aide | null> {
    const result = await this.service.getAide(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async getDocument(
    @graphql.Parent() parent: Versement
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
