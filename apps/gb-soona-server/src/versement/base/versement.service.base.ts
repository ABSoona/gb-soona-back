/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Versement as PrismaVersement,
  Aide as PrismaAide,
  Document as PrismaDocument,
} from "@prisma/client";

export class VersementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VersementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.versement.count(args);
  }

  async versements(
    args: Prisma.VersementFindManyArgs
  ): Promise<PrismaVersement[]> {
    return this.prisma.versement.findMany(args);
  }
  async versement(
    args: Prisma.VersementFindUniqueArgs
  ): Promise<PrismaVersement | null> {
    return this.prisma.versement.findUnique(args);
  }
  async createVersement(
    args: Prisma.VersementCreateArgs
  ): Promise<PrismaVersement> {
    return this.prisma.versement.create(args);
  }
  async updateVersement(
    args: Prisma.VersementUpdateArgs
  ): Promise<PrismaVersement> {
    return this.prisma.versement.update(args);
  }
  async deleteVersement(
    args: Prisma.VersementDeleteArgs
  ): Promise<PrismaVersement> {
    return this.prisma.versement.delete(args);
  }

  async getAide(parentId: number): Promise<PrismaAide | null> {
    return this.prisma.versement
      .findUnique({
        where: { id: parentId },
      })
      .aide();
  }

  async getDocument(parentId: number): Promise<PrismaDocument | null> {
    return this.prisma.versement
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
