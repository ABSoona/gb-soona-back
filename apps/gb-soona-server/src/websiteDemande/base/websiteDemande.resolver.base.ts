/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WebsiteDemande } from "./WebsiteDemande";
import { WebsiteDemandeCountArgs } from "./WebsiteDemandeCountArgs";
import { WebsiteDemandeFindManyArgs } from "./WebsiteDemandeFindManyArgs";
import { WebsiteDemandeFindUniqueArgs } from "./WebsiteDemandeFindUniqueArgs";
import { CreateWebsiteDemandeArgs } from "./CreateWebsiteDemandeArgs";
import { UpdateWebsiteDemandeArgs } from "./UpdateWebsiteDemandeArgs";
import { DeleteWebsiteDemandeArgs } from "./DeleteWebsiteDemandeArgs";
import { WebsiteDemandeService } from "../websiteDemande.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WebsiteDemande)
export class WebsiteDemandeResolverBase {
  constructor(
    protected readonly service: WebsiteDemandeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "read",
    possession: "any",
  })
  async _websiteDemandesMeta(
    @graphql.Args() args: WebsiteDemandeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WebsiteDemande])
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "read",
    possession: "any",
  })
  async websiteDemandes(
    @graphql.Args() args: WebsiteDemandeFindManyArgs
  ): Promise<WebsiteDemande[]> {
    return this.service.websiteDemandes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WebsiteDemande, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "read",
    possession: "own",
  })
  async websiteDemande(
    @graphql.Args() args: WebsiteDemandeFindUniqueArgs
  ): Promise<WebsiteDemande | null> {
    const result = await this.service.websiteDemande(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebsiteDemande)
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "create",
    possession: "any",
  })
  async createWebsiteDemande(
    @graphql.Args() args: CreateWebsiteDemandeArgs
  ): Promise<WebsiteDemande> {
    return await this.service.createWebsiteDemande({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebsiteDemande)
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "update",
    possession: "any",
  })
  async updateWebsiteDemande(
    @graphql.Args() args: UpdateWebsiteDemandeArgs
  ): Promise<WebsiteDemande | null> {
    try {
      return await this.service.updateWebsiteDemande({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteDemande)
  @nestAccessControl.UseRoles({
    resource: "WebsiteDemande",
    action: "delete",
    possession: "any",
  })
  async deleteWebsiteDemande(
    @graphql.Args() args: DeleteWebsiteDemandeArgs
  ): Promise<WebsiteDemande | null> {
    try {
      return await this.service.deleteWebsiteDemande(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
