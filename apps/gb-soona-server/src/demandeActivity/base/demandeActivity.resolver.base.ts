/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DemandeActivity } from "./DemandeActivity";
import { DemandeActivityCountArgs } from "./DemandeActivityCountArgs";
import { DemandeActivityFindManyArgs } from "./DemandeActivityFindManyArgs";
import { DemandeActivityFindUniqueArgs } from "./DemandeActivityFindUniqueArgs";
import { CreateDemandeActivityArgs } from "./CreateDemandeActivityArgs";
import { UpdateDemandeActivityArgs } from "./UpdateDemandeActivityArgs";
import { DeleteDemandeActivityArgs } from "./DeleteDemandeActivityArgs";
import { Aide } from "../../aide/base/Aide";
import { Demande } from "../../demande/base/Demande";
import { User } from "../../user/base/User";
import { DemandeActivityService } from "../demandeActivity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DemandeActivity)
export class DemandeActivityResolverBase {
  constructor(
    protected readonly service: DemandeActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "any",
  })
  async _demandeActivitiesMeta(
    @graphql.Args() args: DemandeActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DemandeActivity])
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "any",
  })
  async demandeActivities(
    @graphql.Args() args: DemandeActivityFindManyArgs
  ): Promise<DemandeActivity[]> {
    return this.service.demandeActivities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DemandeActivity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "own",
  })
  async demandeActivity(
    @graphql.Args() args: DemandeActivityFindUniqueArgs
  ): Promise<DemandeActivity | null> {
    const result = await this.service.demandeActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemandeActivity)
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "create",
    possession: "any",
  })
  async createDemandeActivity(
    @graphql.Args() args: CreateDemandeActivityArgs
  ): Promise<DemandeActivity> {
    return await this.service.createDemandeActivity({
      ...args,
      data: {
        ...args.data,

        aide: args.data.aide
          ? {
              connect: args.data.aide,
            }
          : undefined,

        demande: {
          connect: args.data.demande,
        },

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemandeActivity)
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "update",
    possession: "any",
  })
  async updateDemandeActivity(
    @graphql.Args() args: UpdateDemandeActivityArgs
  ): Promise<DemandeActivity | null> {
    try {
      return await this.service.updateDemandeActivity({
        ...args,
        data: {
          ...args.data,

          aide: args.data.aide
            ? {
                connect: args.data.aide,
              }
            : undefined,

          demande: {
            connect: args.data.demande,
          },

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DemandeActivity)
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "delete",
    possession: "any",
  })
  async deleteDemandeActivity(
    @graphql.Args() args: DeleteDemandeActivityArgs
  ): Promise<DemandeActivity | null> {
    try {
      return await this.service.deleteDemandeActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Aide, {
    nullable: true,
    name: "aide",
  })
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "read",
    possession: "any",
  })
  async getAide(
    @graphql.Parent() parent: DemandeActivity
  ): Promise<Aide | null> {
    const result = await this.service.getAide(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Demande, {
    nullable: true,
    name: "demande",
  })
  @nestAccessControl.UseRoles({
    resource: "Demande",
    action: "read",
    possession: "any",
  })
  async getDemande(
    @graphql.Parent() parent: DemandeActivity
  ): Promise<Demande | null> {
    const result = await this.service.getDemande(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: DemandeActivity
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
