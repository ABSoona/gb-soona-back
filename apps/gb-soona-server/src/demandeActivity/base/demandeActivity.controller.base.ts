/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DemandeActivityService } from "../demandeActivity.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DemandeActivityCreateInput } from "./DemandeActivityCreateInput";
import { DemandeActivity } from "./DemandeActivity";
import { DemandeActivityFindManyArgs } from "./DemandeActivityFindManyArgs";
import { DemandeActivityWhereUniqueInput } from "./DemandeActivityWhereUniqueInput";
import { DemandeActivityUpdateInput } from "./DemandeActivityUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DemandeActivityControllerBase {
  constructor(
    protected readonly service: DemandeActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DemandeActivity })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDemandeActivity(
    @common.Body() data: DemandeActivityCreateInput
  ): Promise<DemandeActivity> {
    return await this.service.createDemandeActivity({
      data: {
        ...data,

        aide: data.aide
          ? {
              connect: data.aide,
            }
          : undefined,

        demande: {
          connect: data.demande,
        },

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        aide: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        demande: {
          select: {
            id: true,
          },
        },

        id: true,
        message: true,
        titre: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DemandeActivity] })
  @ApiNestedQuery(DemandeActivityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async demandeActivities(
    @common.Req() request: Request
  ): Promise<DemandeActivity[]> {
    const args = plainToClass(DemandeActivityFindManyArgs, request.query);
    return this.service.demandeActivities({
      ...args,
      select: {
        aide: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        demande: {
          select: {
            id: true,
          },
        },

        id: true,
        message: true,
        titre: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DemandeActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async demandeActivity(
    @common.Param() params: DemandeActivityWhereUniqueInput
  ): Promise<DemandeActivity | null> {
    const result = await this.service.demandeActivity({
      where: params,
      select: {
        aide: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        demande: {
          select: {
            id: true,
          },
        },

        id: true,
        message: true,
        titre: true,
        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DemandeActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDemandeActivity(
    @common.Param() params: DemandeActivityWhereUniqueInput,
    @common.Body() data: DemandeActivityUpdateInput
  ): Promise<DemandeActivity | null> {
    try {
      return await this.service.updateDemandeActivity({
        where: params,
        data: {
          ...data,

          aide: data.aide
            ? {
                connect: data.aide,
              }
            : undefined,

          demande: {
            connect: data.demande,
          },

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          aide: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          demande: {
            select: {
              id: true,
            },
          },

          id: true,
          message: true,
          titre: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DemandeActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDemandeActivity(
    @common.Param() params: DemandeActivityWhereUniqueInput
  ): Promise<DemandeActivity | null> {
    try {
      return await this.service.deleteDemandeActivity({
        where: params,
        select: {
          aide: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          demande: {
            select: {
              id: true,
            },
          },

          id: true,
          message: true,
          titre: true,
          typeField: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
