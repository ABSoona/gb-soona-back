/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DemandeActivity as PrismaDemandeActivity,
  Aide as PrismaAide,
  Demande as PrismaDemande,
  User as PrismaUser,
} from "@prisma/client";

export class DemandeActivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DemandeActivityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.demandeActivity.count(args);
  }

  async demandeActivities(
    args: Prisma.DemandeActivityFindManyArgs
  ): Promise<PrismaDemandeActivity[]> {
    return this.prisma.demandeActivity.findMany(args);
  }
  async demandeActivity(
    args: Prisma.DemandeActivityFindUniqueArgs
  ): Promise<PrismaDemandeActivity | null> {
    return this.prisma.demandeActivity.findUnique(args);
  }
  async createDemandeActivity(
    args: Prisma.DemandeActivityCreateArgs
  ): Promise<PrismaDemandeActivity> {
    return this.prisma.demandeActivity.create(args);
  }
  async updateDemandeActivity(
    args: Prisma.DemandeActivityUpdateArgs
  ): Promise<PrismaDemandeActivity> {
    return this.prisma.demandeActivity.update(args);
  }
  async deleteDemandeActivity(
    args: Prisma.DemandeActivityDeleteArgs
  ): Promise<PrismaDemandeActivity> {
    return this.prisma.demandeActivity.delete(args);
  }

  async getAide(parentId: number): Promise<PrismaAide | null> {
    return this.prisma.demandeActivity
      .findUnique({
        where: { id: parentId },
      })
      .aide();
  }

  async getDemande(parentId: number): Promise<PrismaDemande | null> {
    return this.prisma.demandeActivity
      .findUnique({
        where: { id: parentId },
      })
      .demande();
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.demandeActivity
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
