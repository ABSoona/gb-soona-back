/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DemandeStatusHistory } from "./DemandeStatusHistory";
import { DemandeStatusHistoryCountArgs } from "./DemandeStatusHistoryCountArgs";
import { DemandeStatusHistoryFindManyArgs } from "./DemandeStatusHistoryFindManyArgs";
import { DemandeStatusHistoryFindUniqueArgs } from "./DemandeStatusHistoryFindUniqueArgs";
import { CreateDemandeStatusHistoryArgs } from "./CreateDemandeStatusHistoryArgs";
import { UpdateDemandeStatusHistoryArgs } from "./UpdateDemandeStatusHistoryArgs";
import { DeleteDemandeStatusHistoryArgs } from "./DeleteDemandeStatusHistoryArgs";
import { Demande } from "../../demande/base/Demande";
import { DemandeStatusHistoryService } from "../demandeStatusHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DemandeStatusHistory)
export class DemandeStatusHistoryResolverBase {
  constructor(
    protected readonly service: DemandeStatusHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "read",
    possession: "any",
  })
  async _demandeStatusHistoriesMeta(
    @graphql.Args() args: DemandeStatusHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DemandeStatusHistory])
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "read",
    possession: "any",
  })
  async demandeStatusHistories(
    @graphql.Args() args: DemandeStatusHistoryFindManyArgs
  ): Promise<DemandeStatusHistory[]> {
    return this.service.demandeStatusHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DemandeStatusHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "read",
    possession: "own",
  })
  async demandeStatusHistory(
    @graphql.Args() args: DemandeStatusHistoryFindUniqueArgs
  ): Promise<DemandeStatusHistory | null> {
    const result = await this.service.demandeStatusHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemandeStatusHistory)
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "create",
    possession: "any",
  })
  async createDemandeStatusHistory(
    @graphql.Args() args: CreateDemandeStatusHistoryArgs
  ): Promise<DemandeStatusHistory> {
    return await this.service.createDemandeStatusHistory({
      ...args,
      data: {
        ...args.data,

        demande: {
          connect: args.data.demande,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemandeStatusHistory)
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "update",
    possession: "any",
  })
  async updateDemandeStatusHistory(
    @graphql.Args() args: UpdateDemandeStatusHistoryArgs
  ): Promise<DemandeStatusHistory | null> {
    try {
      return await this.service.updateDemandeStatusHistory({
        ...args,
        data: {
          ...args.data,

          demande: {
            connect: args.data.demande,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DemandeStatusHistory)
  @nestAccessControl.UseRoles({
    resource: "DemandeStatusHistory",
    action: "delete",
    possession: "any",
  })
  async deleteDemandeStatusHistory(
    @graphql.Args() args: DeleteDemandeStatusHistoryArgs
  ): Promise<DemandeStatusHistory | null> {
    try {
      return await this.service.deleteDemandeStatusHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Demande, {
    nullable: true,
    name: "demande",
  })
  @nestAccessControl.UseRoles({
    resource: "Demande",
    action: "read",
    possession: "any",
  })
  async getDemande(
    @graphql.Parent() parent: DemandeStatusHistory
  ): Promise<Demande | null> {
    const result = await this.service.getDemande(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
