/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Visite as PrismaVisite,
  User as PrismaUser,
  Demande as PrismaDemande,
  Document as PrismaDocument,
} from "@prisma/client";

export class VisiteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VisiteCountArgs, "select">): Promise<number> {
    return this.prisma.visite.count(args);
  }

  async visites(args: Prisma.VisiteFindManyArgs): Promise<PrismaVisite[]> {
    return this.prisma.visite.findMany(args);
  }
  async visite(
    args: Prisma.VisiteFindUniqueArgs
  ): Promise<PrismaVisite | null> {
    return this.prisma.visite.findUnique(args);
  }
  async createVisite(args: Prisma.VisiteCreateArgs): Promise<PrismaVisite> {
    return this.prisma.visite.create(args);
  }
  async updateVisite(args: Prisma.VisiteUpdateArgs): Promise<PrismaVisite> {
    return this.prisma.visite.update(args);
  }
  async deleteVisite(args: Prisma.VisiteDeleteArgs): Promise<PrismaVisite> {
    return this.prisma.visite.delete(args);
  }

  async getActeur(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.visite
      .findUnique({
        where: { id: parentId },
      })
      .acteur();
  }

  async getDemande(parentId: number): Promise<PrismaDemande | null> {
    return this.prisma.visite
      .findUnique({
        where: { id: parentId },
      })
      .demande();
  }

  async getDocument(parentId: number): Promise<PrismaDocument | null> {
    return this.prisma.visite
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
