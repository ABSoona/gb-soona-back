/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Visite } from "./Visite";
import { VisiteCountArgs } from "./VisiteCountArgs";
import { VisiteFindManyArgs } from "./VisiteFindManyArgs";
import { VisiteFindUniqueArgs } from "./VisiteFindUniqueArgs";
import { CreateVisiteArgs } from "./CreateVisiteArgs";
import { UpdateVisiteArgs } from "./UpdateVisiteArgs";
import { DeleteVisiteArgs } from "./DeleteVisiteArgs";
import { User } from "../../user/base/User";
import { Demande } from "../../demande/base/Demande";
import { Document } from "../../document/base/Document";
import { VisiteService } from "../visite.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Visite)
export class VisiteResolverBase {
  constructor(
    protected readonly service: VisiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "read",
    possession: "any",
  })
  async _visitesMeta(
    @graphql.Args() args: VisiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Visite])
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "read",
    possession: "any",
  })
  async visites(@graphql.Args() args: VisiteFindManyArgs): Promise<Visite[]> {
    return this.service.visites(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Visite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "read",
    possession: "own",
  })
  async visite(
    @graphql.Args() args: VisiteFindUniqueArgs
  ): Promise<Visite | null> {
    const result = await this.service.visite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Visite)
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "create",
    possession: "any",
  })
  async createVisite(@graphql.Args() args: CreateVisiteArgs): Promise<Visite> {
    return await this.service.createVisite({
      ...args,
      data: {
        ...args.data,

        acteur: {
          connect: args.data.acteur,
        },

        demande: {
          connect: args.data.demande,
        },

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Visite)
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "update",
    possession: "any",
  })
  async updateVisite(
    @graphql.Args() args: UpdateVisiteArgs
  ): Promise<Visite | null> {
    try {
      return await this.service.updateVisite({
        ...args,
        data: {
          ...args.data,

          acteur: {
            connect: args.data.acteur,
          },

          demande: {
            connect: args.data.demande,
          },

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Visite)
  @nestAccessControl.UseRoles({
    resource: "Visite",
    action: "delete",
    possession: "any",
  })
  async deleteVisite(
    @graphql.Args() args: DeleteVisiteArgs
  ): Promise<Visite | null> {
    try {
      return await this.service.deleteVisite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "acteur",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getActeur(@graphql.Parent() parent: Visite): Promise<User | null> {
    const result = await this.service.getActeur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Demande, {
    nullable: true,
    name: "demande",
  })
  @nestAccessControl.UseRoles({
    resource: "Demande",
    action: "read",
    possession: "any",
  })
  async getDemande(@graphql.Parent() parent: Visite): Promise<Demande | null> {
    const result = await this.service.getDemande(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async getDocument(
    @graphql.Parent() parent: Visite
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
