/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Aide } from "./Aide";
import { AideCountArgs } from "./AideCountArgs";
import { AideFindManyArgs } from "./AideFindManyArgs";
import { AideFindUniqueArgs } from "./AideFindUniqueArgs";
import { CreateAideArgs } from "./CreateAideArgs";
import { UpdateAideArgs } from "./UpdateAideArgs";
import { DeleteAideArgs } from "./DeleteAideArgs";
import { DemandeActivityFindManyArgs } from "../../demandeActivity/base/DemandeActivityFindManyArgs";
import { DemandeActivity } from "../../demandeActivity/base/DemandeActivity";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { VersementFindManyArgs } from "../../versement/base/VersementFindManyArgs";
import { Versement } from "../../versement/base/Versement";
import { Contact } from "../../contact/base/Contact";
import { Demande } from "../../demande/base/Demande";
import { AideService } from "../aide.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Aide)
export class AideResolverBase {
  constructor(
    protected readonly service: AideService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "read",
    possession: "any",
  })
  async _aidesMeta(
    @graphql.Args() args: AideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Aide])
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "read",
    possession: "any",
  })
  async aides(@graphql.Args() args: AideFindManyArgs): Promise<Aide[]> {
    return this.service.aides(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Aide, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "read",
    possession: "own",
  })
  async aide(@graphql.Args() args: AideFindUniqueArgs): Promise<Aide | null> {
    const result = await this.service.aide(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Aide)
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "create",
    possession: "any",
  })
  async createAide(@graphql.Args() args: CreateAideArgs): Promise<Aide> {
    return await this.service.createAide({
      ...args,
      data: {
        ...args.data,

        contact: {
          connect: args.data.contact,
        },

        demande: args.data.demande
          ? {
              connect: args.data.demande,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Aide)
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "update",
    possession: "any",
  })
  async updateAide(@graphql.Args() args: UpdateAideArgs): Promise<Aide | null> {
    try {
      return await this.service.updateAide({
        ...args,
        data: {
          ...args.data,

          contact: {
            connect: args.data.contact,
          },

          demande: args.data.demande
            ? {
                connect: args.data.demande,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Aide)
  @nestAccessControl.UseRoles({
    resource: "Aide",
    action: "delete",
    possession: "any",
  })
  async deleteAide(@graphql.Args() args: DeleteAideArgs): Promise<Aide | null> {
    try {
      return await this.service.deleteAide(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DemandeActivity], { name: "demandeActivities" })
  @nestAccessControl.UseRoles({
    resource: "DemandeActivity",
    action: "read",
    possession: "any",
  })
  async findDemandeActivities(
    @graphql.Parent() parent: Aide,
    @graphql.Args() args: DemandeActivityFindManyArgs
  ): Promise<DemandeActivity[]> {
    const results = await this.service.findDemandeActivities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Document], { name: "documents" })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @graphql.Parent() parent: Aide,
    @graphql.Args() args: DocumentFindManyArgs
  ): Promise<Document[]> {
    const results = await this.service.findDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Versement], { name: "versements" })
  @nestAccessControl.UseRoles({
    resource: "Versement",
    action: "read",
    possession: "any",
  })
  async findVersements(
    @graphql.Parent() parent: Aide,
    @graphql.Args() args: VersementFindManyArgs
  ): Promise<Versement[]> {
    const results = await this.service.findVersements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async getContact(@graphql.Parent() parent: Aide): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Demande, {
    nullable: true,
    name: "demande",
  })
  @nestAccessControl.UseRoles({
    resource: "Demande",
    action: "read",
    possession: "any",
  })
  async getDemande(@graphql.Parent() parent: Aide): Promise<Demande | null> {
    const result = await this.service.getDemande(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
