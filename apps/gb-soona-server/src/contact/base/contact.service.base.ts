/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Contact as PrismaContact,
  Aide as PrismaAide,
  Demande as PrismaDemande,
  Document as PrismaDocument,
} from "@prisma/client";

export class ContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ContactCountArgs, "select">): Promise<number> {
    return this.prisma.contact.count(args);
  }

  async contacts(args: Prisma.ContactFindManyArgs): Promise<PrismaContact[]> {
    return this.prisma.contact.findMany(args);
  }
  async contact(
    args: Prisma.ContactFindUniqueArgs
  ): Promise<PrismaContact | null> {
    return this.prisma.contact.findUnique(args);
  }
  async createContact(args: Prisma.ContactCreateArgs): Promise<PrismaContact> {
    return this.prisma.contact.create(args);
  }
  async updateContact(args: Prisma.ContactUpdateArgs): Promise<PrismaContact> {
    return this.prisma.contact.update(args);
  }
  async deleteContact(args: Prisma.ContactDeleteArgs): Promise<PrismaContact> {
    return this.prisma.contact.delete(args);
  }

  async findAides(
    parentId: number,
    args: Prisma.AideFindManyArgs
  ): Promise<PrismaAide[]> {
    return this.prisma.contact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aides(args);
  }

  async findDemandes(
    parentId: number,
    args: Prisma.DemandeFindManyArgs
  ): Promise<PrismaDemande[]> {
    return this.prisma.contact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .demandes(args);
  }

  async findDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.contact
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }
}
