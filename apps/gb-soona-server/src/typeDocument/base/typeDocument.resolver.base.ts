/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TypeDocument } from "./TypeDocument";
import { TypeDocumentCountArgs } from "./TypeDocumentCountArgs";
import { TypeDocumentFindManyArgs } from "./TypeDocumentFindManyArgs";
import { TypeDocumentFindUniqueArgs } from "./TypeDocumentFindUniqueArgs";
import { CreateTypeDocumentArgs } from "./CreateTypeDocumentArgs";
import { UpdateTypeDocumentArgs } from "./UpdateTypeDocumentArgs";
import { DeleteTypeDocumentArgs } from "./DeleteTypeDocumentArgs";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { TypeDocumentService } from "../typeDocument.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TypeDocument)
export class TypeDocumentResolverBase {
  constructor(
    protected readonly service: TypeDocumentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "read",
    possession: "any",
  })
  async _typeDocumentsMeta(
    @graphql.Args() args: TypeDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TypeDocument])
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "read",
    possession: "any",
  })
  async typeDocuments(
    @graphql.Args() args: TypeDocumentFindManyArgs
  ): Promise<TypeDocument[]> {
    return this.service.typeDocuments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TypeDocument, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "read",
    possession: "own",
  })
  async typeDocument(
    @graphql.Args() args: TypeDocumentFindUniqueArgs
  ): Promise<TypeDocument | null> {
    const result = await this.service.typeDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypeDocument)
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "create",
    possession: "any",
  })
  async createTypeDocument(
    @graphql.Args() args: CreateTypeDocumentArgs
  ): Promise<TypeDocument> {
    return await this.service.createTypeDocument({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypeDocument)
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "update",
    possession: "any",
  })
  async updateTypeDocument(
    @graphql.Args() args: UpdateTypeDocumentArgs
  ): Promise<TypeDocument | null> {
    try {
      return await this.service.updateTypeDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TypeDocument)
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "delete",
    possession: "any",
  })
  async deleteTypeDocument(
    @graphql.Args() args: DeleteTypeDocumentArgs
  ): Promise<TypeDocument | null> {
    try {
      return await this.service.deleteTypeDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Document], { name: "documents" })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @graphql.Parent() parent: TypeDocument,
    @graphql.Args() args: DocumentFindManyArgs
  ): Promise<Document[]> {
    const results = await this.service.findDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
