/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TypeDocument as PrismaTypeDocument,
  Document as PrismaDocument,
} from "@prisma/client";

export class TypeDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TypeDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.typeDocument.count(args);
  }

  async typeDocuments(
    args: Prisma.TypeDocumentFindManyArgs
  ): Promise<PrismaTypeDocument[]> {
    return this.prisma.typeDocument.findMany(args);
  }
  async typeDocument(
    args: Prisma.TypeDocumentFindUniqueArgs
  ): Promise<PrismaTypeDocument | null> {
    return this.prisma.typeDocument.findUnique(args);
  }
  async createTypeDocument(
    args: Prisma.TypeDocumentCreateArgs
  ): Promise<PrismaTypeDocument> {
    return this.prisma.typeDocument.create(args);
  }
  async updateTypeDocument(
    args: Prisma.TypeDocumentUpdateArgs
  ): Promise<PrismaTypeDocument> {
    return this.prisma.typeDocument.update(args);
  }
  async deleteTypeDocument(
    args: Prisma.TypeDocumentDeleteArgs
  ): Promise<PrismaTypeDocument> {
    return this.prisma.typeDocument.delete(args);
  }

  async findDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.typeDocument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }
}
