/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TypeDocumentService } from "../typeDocument.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TypeDocumentCreateInput } from "./TypeDocumentCreateInput";
import { TypeDocument } from "./TypeDocument";
import { TypeDocumentFindManyArgs } from "./TypeDocumentFindManyArgs";
import { TypeDocumentWhereUniqueInput } from "./TypeDocumentWhereUniqueInput";
import { TypeDocumentUpdateInput } from "./TypeDocumentUpdateInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TypeDocumentControllerBase {
  constructor(
    protected readonly service: TypeDocumentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TypeDocument })
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTypeDocument(
    @common.Body() data: TypeDocumentCreateInput
  ): Promise<TypeDocument> {
    return await this.service.createTypeDocument({
      data: data,
      select: {
        createdAt: true,
        id: true,
        internalCode: true,
        isInternal: true,
        label: true,
        rattachement: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TypeDocument] })
  @ApiNestedQuery(TypeDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typeDocuments(@common.Req() request: Request): Promise<TypeDocument[]> {
    const args = plainToClass(TypeDocumentFindManyArgs, request.query);
    return this.service.typeDocuments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        internalCode: true,
        isInternal: true,
        label: true,
        rattachement: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TypeDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typeDocument(
    @common.Param() params: TypeDocumentWhereUniqueInput
  ): Promise<TypeDocument | null> {
    const result = await this.service.typeDocument({
      where: params,
      select: {
        createdAt: true,
        id: true,
        internalCode: true,
        isInternal: true,
        label: true,
        rattachement: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TypeDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTypeDocument(
    @common.Param() params: TypeDocumentWhereUniqueInput,
    @common.Body() data: TypeDocumentUpdateInput
  ): Promise<TypeDocument | null> {
    try {
      return await this.service.updateTypeDocument({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          internalCode: true,
          isInternal: true,
          label: true,
          rattachement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TypeDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTypeDocument(
    @common.Param() params: TypeDocumentWhereUniqueInput
  ): Promise<TypeDocument | null> {
    try {
      return await this.service.deleteTypeDocument({
        where: params,
        select: {
          createdAt: true,
          id: true,
          internalCode: true,
          isInternal: true,
          label: true,
          rattachement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: TypeDocumentWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        contact: {
          select: {
            id: true,
          },
        },

        contenu: true,
        createdAt: true,

        demande: {
          select: {
            id: true,
          },
        },

        id: true,

        typeDocument: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "update",
    possession: "any",
  })
  async connectDocuments(
    @common.Param() params: TypeDocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateTypeDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "update",
    possession: "any",
  })
  async updateDocuments(
    @common.Param() params: TypeDocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateTypeDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "TypeDocument",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(
    @common.Param() params: TypeDocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateTypeDocument({
      where: params,
      data,
      select: { id: true },
    });
  }
}
