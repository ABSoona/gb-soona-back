datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Aide {
  contact           Contact            @relation(fields: [contactId], references: [id])
  contactId         Int
  createdAt         DateTime           @default(now())
  crediteur         EnumAideCrediteur?
  dateAide          DateTime?
  dateExpiration    DateTime?
  demande           Demande?           @relation(fields: [demandeId], references: [id])
  demandeId         Int?
  demandeActivities DemandeActivity[]
  documents         Document[]
  frequence         EnumAideFrequence?
  id                Int                @id @default(autoincrement())
  infosCrediteur    String?
  montant           Int?
  nombreVersements  Int?
  reetudier         Boolean            @default(false)
  remarque          String?
  status            EnumAideStatus     @default(EnCours)
  suspendue         Boolean?
  typeField         EnumAideTypeField?
  updatedAt         DateTime           @updatedAt
  versements        Versement[]
}

model Demande {
  acteur                   User?                          @relation(name: "acteur", fields: [acteurId], references: [id])
  acteurId                 String?
  agesEnfants              String?
  aides                    Aide[]
  apl                      Int?
  autresAides              String?
  autresCharges            Int?
  categorieDemandeur       EnumDemandeCategorieDemandeur?
  contact                  Contact                        @relation(fields: [contactId], references: [id])
  contactId                Int
  createdAt                DateTime?                      @default(now())
  dateVisite               DateTime?
  demandeStatusHistories   DemandeStatusHistory[]
  demandeActivities        DemandeActivity[]
  dernierContact           DateTime?
  derniereRelance          DateTime?
  dettes                   Int?
  documents                Document[]
  facturesEnergie          Int?
  id                       Int                            @id @default(autoincrement())
  loyer                    Int?
  natureDettes             String?
  nombreEnfants            Int?                           @default(0)
  nombreRelances           Int?
  proprietaire             User?                          @relation(name: "demandesEnPropriete", fields: [proprietaireId], references: [id])
  proprietaireId           String?
  recommandation           String?
  remarques                String?
  revenus                  Int?
  revenusConjoint          Int?
  situationFamiliale       String?
  situationProConjoint     String?
  situationProfessionnelle String?
  status                   String?
  updatedAt                DateTime                       @updatedAt
  visites                  Visite[]
}



model Contact {
  adresse         String?
  age             Int?
  aides           Aide[]
  codePostal      Int?
  createdAt       DateTime   @default(now())
  dateCreation    DateTime?
  dateVisite      DateTime?
  demandes        Demande[]
  documents       Document[]
  email           String?
  id              Int        @id @default(autoincrement())
  nom             String?
  numBeneficiaire String?
  prenom          String?
  remarques       String?
  status          String?
  telephone       String?
  updatedAt       DateTime   @updatedAt
  ville           String?
}

model User {
  adresseCodePostal   String?
  adresseRue          String?
  adresseVille        String?
  createdAt                   DateTime                     @default(now())
  demandeActivities DemandeActivity[]
  demandesActeurs     Demande[]                            @relation(name: "acteur")
  demandesEnPropriete Demande[]                            @relation(name: "demandesEnPropriete")
  email                       String?                      @unique
  firstName                   String?
  hasAccess                   Boolean                      @default(true)
  id                          String                       @id @default(cuid())
  lastName                    String?
  password                    String
  role                        String?
  roles                       Json
  status                      String?
  subordonnes         User[]                              @relation(name: "subordonnes")
  superieur           User?                               @relation(name: "subordonnes", fields: [superieurId], references: [id])
  superieurId         String?
  token                       String?
  updatedAt                   DateTime                     @updatedAt
  userNotificationPreferences UserNotificationPreference[]
  username                    String                       @unique
  visites             Visite[]
}

model TypeDocument {
  createdAt    DateTime                     @default(now())
  documents    Document[]
  id           Int                          @id @default(autoincrement())
  internalCode String?                      @unique
  isInternal   Boolean                      @default(false)
  label        String
  rattachement EnumTypeDocumentRattachement
  updatedAt    DateTime                     @updatedAt
}
enum EnumTypeDocumentRattachement {
  Contact
  Demande
  Suivi
  Aide
}


model Document {
  aide           Aide?         @relation(fields: [aideId], references: [id])
  aideId         Int?
  contact        Contact?      @relation(fields: [contactId], references: [id])
  contactId      Int?
  contenu        Json?
  createdAt      DateTime      @default(now())
  demande        Demande?      @relation(fields: [demandeId], references: [id])
  demandeId      Int?
  id             String        @id @default(cuid())
  name           String?
  typeDocument   TypeDocument? @relation(fields: [typeDocumentId], references: [id])
  typeDocumentId Int?
  updatedAt      DateTime      @updatedAt
  versements     Versement?    @relation(fields: [versementsId], references: [id])
  versementsId   Int?          @unique
  visites        Visite?       @relation(fields: [visitesId], references: [id])
  visitesId      Int?          @unique
}
model Visite {
  acteur     User              @relation(fields: [acteurId], references: [id])
  acteurId   String
  createdAt  DateTime          @default(now())
  dateVisite DateTime?
  demande    Demande          @relation(fields: [demandeId], references: [id], onDelete: Cascade)
  demandeId  Int
  document   Document?
  id         Int               @id @default(autoincrement())
  note       String?
  status     EnumVisiteStatus?
  updatedAt  DateTime          @updatedAt
}

enum EnumVisiteStatus {
  Programee
  Realisee
  Annulee
}


model UserNotificationPreference {
  active    Boolean
  createdAt DateTime                                @default(now())
  id        Int                                     @id @default(autoincrement())
  typeField EnumUserNotificationPreferenceTypeField
  updatedAt DateTime                                @updatedAt
  user      User                                    @relation(fields: [userId], references: [id])
  userId    String
}

model Invitation {
  createdAt DateTime @default(now())
  email     String
  id        String   @id @default(cuid())
  message   String?
  role      String
  token     String
  updatedAt DateTime @updatedAt
  used      Boolean
}

model WebsiteDemande {
  adresseDemandeur         String?
  ageDemandeur             Int?
  agesEnfants              String?
  apl                      Int?
  autresAides              String?
  autresCharges            Int?
  codePostalDemandeur      Int?
  createdAt                DateTime                 @default(now())
  dettes                   Int?
  emailDemandeur           String?
  erreur                   String?
  facturesEnergie          Int?
  id                       String                   @id @default(cuid())
  loyer                    Int?
  natureDettes             String?
  nomDemandeur             String?
  nombreEnfants            Int?
  prenomDemandeur          String?
  remarques                String?
  revenus                  Int?
  revenusConjoint          Int?
  situationFamiliale       String?
  situationProConjoint     String?
  situationProfessionnelle String?
  status                   EnumWebsiteDemandeStatus
  telephoneDemandeur       String?
  updatedAt                DateTime                 @updatedAt
  villeDemandeur           String?
}

model DemandeStatusHistory {
  createdAt DateTime @default(now())
  demande   Demande  @relation(fields: [demandeId], references: [id] , onDelete: Cascade)
  demandeId Int
  id        Int      @id @default(autoincrement())
  status    String
  updatedAt DateTime @updatedAt
}

model DemandeActivity {
  aide      Aide?    @relation(fields: [aideId], references: [id])
  aideId    Int?
  createdAt DateTime @default(now())
  demande   Demande  @relation(fields: [demandeId], references: [id] , onDelete: Cascade)
  demandeId Int
  id        Int      @id @default(autoincrement())
  message   String?
  typeField String
  titre     String
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Versement {
  aide          Aide                @relation(fields: [aideId], references: [id])
  aideId        Int
  createdAt     DateTime            @default(now())
  dataVersement DateTime
  document      Document?
  id            Int                 @id @default(autoincrement())
  montant       Int
  status        EnumVersementStatus
  updatedAt     DateTime            @updatedAt
  
}


enum EnumAideCrediteur {
  LeBNFiciaire
  UnCrAncier
}

enum EnumAideFrequence {
  Mensuelle
  BiMensuelle
  Trimestrielle
  Hebdomadaire
  Unefois
}

enum EnumAideTypeField {
  AssistanceAdministrative
  FinanciRe
}
enum EnumUserNotificationPreferenceTypeField {
  NouvelleDemande
  DemandeEnVisite
  DemandeEnCommission
  ContactBan
  AideExpir
  ErreursDemandes
  DemandeAffecte
}

enum EnumWebsiteDemandeStatus {
  EnCours
  EnErreur
  Trait
  Recue
}
enum EnumDemandeCategorieDemandeur {
  LourdementEndett
  NCessiteux
  Pauvre
}
enum EnumAideStatus {
  EnCours
  Expir
}
enum EnumVersementStatus {
  AVerser
  Verse
}