# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Aide {
  contact: Contact
  createdAt: DateTime!
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  frequence: EnumAideFrequence
  id: Float!
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  remarque: String
  suspendue: Boolean
  typeField: EnumAideTypeField
  updatedAt: DateTime!
}

input AideCreateInput {
  contact: ContactWhereUniqueInput
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  frequence: EnumAideFrequence
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  remarque: String
  suspendue: Boolean
  typeField: EnumAideTypeField
}

input AideCreateNestedManyWithoutContactsInput {
  connect: [AideWhereUniqueInput!]
}

input AideListRelationFilter {
  every: AideWhereInput
  none: AideWhereInput
  some: AideWhereInput
}

input AideOrderByInput {
  contactId: SortOrder
  createdAt: SortOrder
  crediteur: SortOrder
  dateAide: SortOrder
  dateExpiration: SortOrder
  frequence: SortOrder
  id: SortOrder
  infosCrediteur: SortOrder
  montant: SortOrder
  nombreVersements: SortOrder
  remarque: SortOrder
  suspendue: SortOrder
  typeField: SortOrder
  updatedAt: SortOrder
}

input AideUpdateInput {
  contact: ContactWhereUniqueInput
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  frequence: EnumAideFrequence
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  remarque: String
  suspendue: Boolean
  typeField: EnumAideTypeField
}

input AideUpdateManyWithoutContactsInput {
  connect: [AideWhereUniqueInput!]
  disconnect: [AideWhereUniqueInput!]
  set: [AideWhereUniqueInput!]
}

input AideWhereInput {
  contact: ContactWhereUniqueInput
  createdAt: DateTimeFilter
  crediteur: EnumAideCrediteur
  dateAide: DateTimeNullableFilter
  dateExpiration: DateTimeNullableFilter
  frequence: EnumAideFrequence
  id: IntFilter
  infosCrediteur: StringNullableFilter
  montant: IntNullableFilter
  nombreVersements: IntNullableFilter
  remarque: StringNullableFilter
  suspendue: BooleanNullableFilter
  typeField: EnumAideTypeField
  updatedAt: DateTimeFilter
}

input AideWhereUniqueInput {
  id: Float!
}

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

type Contact {
  adresse: String
  age: Float
  aides(orderBy: [AideOrderByInput!], skip: Float, take: Float, where: AideWhereInput): [Aide!]!
  codePostal: Float
  createdAt: DateTime!
  dateCreation: DateTime
  demandes(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  email: String
  id: Float!
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  updatedAt: DateTime!
  ville: String
  visites(orderBy: [VisiteOrderByInput!], skip: Float, take: Float, where: VisiteWhereInput): [Visite!]!
}

input ContactCreateInput {
  adresse: String
  age: Float
  aides: AideCreateNestedManyWithoutContactsInput
  codePostal: Float
  dateCreation: DateTime
  demandes: DemandeCreateNestedManyWithoutContactsInput
  documents: DocumentCreateNestedManyWithoutContactsInput
  email: String
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  ville: String
  visites: VisiteCreateNestedManyWithoutContactsInput
}

input ContactOrderByInput {
  adresse: SortOrder
  age: SortOrder
  codePostal: SortOrder
  createdAt: SortOrder
  dateCreation: SortOrder
  email: SortOrder
  id: SortOrder
  nom: SortOrder
  numBeneficiaire: SortOrder
  prenom: SortOrder
  remarques: SortOrder
  status: SortOrder
  telephone: SortOrder
  updatedAt: SortOrder
  ville: SortOrder
}

input ContactUpdateInput {
  adresse: String
  age: Float
  aides: AideUpdateManyWithoutContactsInput
  codePostal: Float
  dateCreation: DateTime
  demandes: DemandeUpdateManyWithoutContactsInput
  documents: DocumentUpdateManyWithoutContactsInput
  email: String
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  ville: String
  visites: VisiteUpdateManyWithoutContactsInput
}

input ContactWhereInput {
  adresse: StringNullableFilter
  age: IntNullableFilter
  aides: AideListRelationFilter
  codePostal: IntNullableFilter
  createdAt: DateTimeFilter
  dateCreation: DateTimeNullableFilter
  demandes: DemandeListRelationFilter
  documents: DocumentListRelationFilter
  email: StringNullableFilter
  id: IntFilter
  nom: StringNullableFilter
  numBeneficiaire: StringNullableFilter
  prenom: StringNullableFilter
  remarques: StringNullableFilter
  status: StringNullableFilter
  telephone: StringNullableFilter
  ville: StringNullableFilter
  visites: VisiteListRelationFilter
}

input ContactWhereUniqueInput {
  id: Float!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Demande {
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  contact: Contact
  createdAt: DateTime
  dettes: Float
  facturesEnergie: Float
  id: Float!
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
  updatedAt: DateTime!
}

input DemandeCreateInput {
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  contact: ContactWhereUniqueInput
  dettes: Float
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
}

input DemandeCreateNestedManyWithoutContactsInput {
  connect: [DemandeWhereUniqueInput!]
}

input DemandeListRelationFilter {
  every: DemandeWhereInput
  none: DemandeWhereInput
  some: DemandeWhereInput
}

input DemandeOrderByInput {
  agesEnfants: SortOrder
  apl: SortOrder
  autresAides: SortOrder
  autresCharges: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
  dettes: SortOrder
  facturesEnergie: SortOrder
  id: SortOrder
  loyer: SortOrder
  natureDettes: SortOrder
  nombreEnfants: SortOrder
  remarques: SortOrder
  revenus: SortOrder
  revenusConjoint: SortOrder
  situationFamiliale: SortOrder
  situationProConjoint: SortOrder
  situationProfessionnelle: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input DemandeUpdateInput {
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  contact: ContactWhereUniqueInput
  dettes: Float
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
}

input DemandeUpdateManyWithoutContactsInput {
  connect: [DemandeWhereUniqueInput!]
  disconnect: [DemandeWhereUniqueInput!]
  set: [DemandeWhereUniqueInput!]
}

input DemandeWhereInput {
  agesEnfants: StringNullableFilter
  apl: IntNullableFilter
  autresAides: StringNullableFilter
  autresCharges: IntNullableFilter
  contact: ContactWhereUniqueInput
  createdAt: DateTimeNullableFilter
  dettes: IntNullableFilter
  facturesEnergie: IntNullableFilter
  id: IntFilter
  loyer: IntNullableFilter
  natureDettes: StringNullableFilter
  nombreEnfants: IntNullableFilter
  remarques: StringNullableFilter
  revenus: IntNullableFilter
  revenusConjoint: IntNullableFilter
  situationFamiliale: StringNullableFilter
  situationProConjoint: StringNullableFilter
  situationProfessionnelle: StringNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeFilter
}

input DemandeWhereUniqueInput {
  id: Float!
}

type Document {
  contact: Contact
  contenu: JSON
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input DocumentCreateInput {
  contact: ContactWhereUniqueInput
  contenu: JSON
}

input DocumentCreateNestedManyWithoutContactsInput {
  connect: [DocumentWhereUniqueInput!]
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  none: DocumentWhereInput
  some: DocumentWhereInput
}

input DocumentOrderByInput {
  contactId: SortOrder
  contenu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DocumentUpdateInput {
  contact: ContactWhereUniqueInput
  contenu: JSON
}

input DocumentUpdateManyWithoutContactsInput {
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
}

input DocumentWhereInput {
  contact: ContactWhereUniqueInput
  contenu: JsonFilter
  id: StringFilter
}

input DocumentWhereUniqueInput {
  id: String!
}

enum EnumAideCrediteur {
  LeBNFiciaire
  UnCrAncier
}

enum EnumAideFrequence {
  BiMensuelle
  Hebdomadaire
  Mensuelle
  Trimestrielle
  UneFois
}

enum EnumAideTypeField {
  Alimentaire
  FinanciRe
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAide(data: AideCreateInput!): Aide!
  createContact(data: ContactCreateInput!): Contact!
  createDemande(data: DemandeCreateInput!): Demande!
  createDocument(data: DocumentCreateInput!): Document!
  createUser(data: UserCreateInput!): User!
  createVisite(data: VisiteCreateInput!): Visite!
  deleteAide(where: AideWhereUniqueInput!): Aide!
  deleteContact(where: ContactWhereUniqueInput!): Contact!
  deleteContenu(where: DocumentWhereUniqueInput!): Document!
  deleteDemande(where: DemandeWhereUniqueInput!): Demande!
  deleteDocument(where: DocumentWhereUniqueInput!): Document!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteVisite(where: VisiteWhereUniqueInput!): Visite!
  login(credentials: Credentials!): UserInfo!
  updateAide(data: AideUpdateInput!, where: AideWhereUniqueInput!): Aide!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact!
  updateDemande(data: DemandeUpdateInput!, where: DemandeWhereUniqueInput!): Demande!
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateVisite(data: VisiteUpdateInput!, where: VisiteWhereUniqueInput!): Visite!
  uploadContenu(file: Upload!, where: DocumentWhereUniqueInput!): Document!
}

type Query {
  _aidesMeta(where: AideWhereInput): MetaQueryPayload!
  _contactsMeta(where: ContactWhereInput): MetaQueryPayload!
  _demandesMeta(where: DemandeWhereInput): MetaQueryPayload!
  _documentsMeta(where: DocumentWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  _visitesMeta(where: VisiteWhereInput): MetaQueryPayload!
  aide(where: AideWhereUniqueInput!): Aide
  aides(orderBy: [AideOrderByInput!], skip: Float, take: Float, where: AideWhereInput): [Aide!]!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(orderBy: [ContactOrderByInput!], skip: Float, take: Float, where: ContactWhereInput): [Contact!]!
  demande(where: DemandeWhereUniqueInput!): Demande
  demandes(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  document(where: DocumentWhereUniqueInput!): Document
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  visite(where: VisiteWhereUniqueInput!): Visite
  visites(orderBy: [VisiteOrderByInput!], skip: Float, take: Float, where: VisiteWhereInput): [Visite!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  role: String
  roles: JSON!
  status: String
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  role: String
  roles: JSON!
  status: String
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
  roles: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  role: String
  roles: JSON
  status: String
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  role: StringNullableFilter
  status: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}

type Visite {
  contact: Contact
  createdAt: DateTime!
  dateVisite: DateTime
  id: String!
  rapportVisite: String
  updatedAt: DateTime!
}

input VisiteCreateInput {
  contact: ContactWhereUniqueInput
  dateVisite: DateTime
  rapportVisite: String
}

input VisiteCreateNestedManyWithoutContactsInput {
  connect: [VisiteWhereUniqueInput!]
}

input VisiteListRelationFilter {
  every: VisiteWhereInput
  none: VisiteWhereInput
  some: VisiteWhereInput
}

input VisiteOrderByInput {
  contactId: SortOrder
  createdAt: SortOrder
  dateVisite: SortOrder
  id: SortOrder
  rapportVisite: SortOrder
  updatedAt: SortOrder
}

input VisiteUpdateInput {
  contact: ContactWhereUniqueInput
  dateVisite: DateTime
  rapportVisite: String
}

input VisiteUpdateManyWithoutContactsInput {
  connect: [VisiteWhereUniqueInput!]
  disconnect: [VisiteWhereUniqueInput!]
  set: [VisiteWhereUniqueInput!]
}

input VisiteWhereInput {
  contact: ContactWhereUniqueInput
  createdAt: DateTimeFilter
  dateVisite: DateTimeNullableFilter
  id: StringFilter
  rapportVisite: StringNullableFilter
}

input VisiteWhereUniqueInput {
  id: String!
}