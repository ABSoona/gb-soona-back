# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Aide {
  contact: Contact
  createdAt: DateTime!
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  demande: Demande
  demandeActivities(orderBy: [DemandeActivityOrderByInput!], skip: Float, take: Float, where: DemandeActivityWhereInput): [DemandeActivity!]!
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  frequence: EnumAideFrequence
  id: Float!
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  reetudier: Boolean!
  remarque: String
  status: EnumAideStatus
  suspendue: Boolean
  typeField: EnumAideTypeField
  updatedAt: DateTime!
  versements(orderBy: [VersementOrderByInput!], skip: Float, take: Float, where: VersementWhereInput): [Versement!]!
}

input AideCreateInput {
  contact: ContactWhereUniqueInput!
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  demande: DemandeWhereUniqueInput
  demandeActivities: DemandeActivityCreateNestedManyWithoutAidesInput
  documents: DocumentCreateNestedManyWithoutAidesInput
  frequence: EnumAideFrequence
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  reetudier: Boolean!
  remarque: String
  status: EnumAideStatus!
  suspendue: Boolean
  typeField: EnumAideTypeField
  versements: VersementCreateNestedManyWithoutAidesInput
}

input AideCreateNestedManyWithoutContactsInput {
  connect: [AideWhereUniqueInput!]
}

input AideCreateNestedManyWithoutDemandesInput {
  connect: [AideWhereUniqueInput!]
}

input AideListRelationFilter {
  every: AideWhereInput
  none: AideWhereInput
  some: AideWhereInput
}

input AideOrderByInput {
  contactId: SortOrder
  createdAt: SortOrder
  crediteur: SortOrder
  dateAide: SortOrder
  dateExpiration: SortOrder
  demandeId: SortOrder
  frequence: SortOrder
  id: SortOrder
  infosCrediteur: SortOrder
  montant: SortOrder
  nombreVersements: SortOrder
  reetudier: SortOrder
  remarque: SortOrder
  status: SortOrder
  suspendue: SortOrder
  typeField: SortOrder
  updatedAt: SortOrder
}

input AideUpdateInput {
  contact: ContactWhereUniqueInput
  crediteur: EnumAideCrediteur
  dateAide: DateTime
  dateExpiration: DateTime
  demande: DemandeWhereUniqueInput
  demandeActivities: DemandeActivityUpdateManyWithoutAidesInput
  documents: DocumentUpdateManyWithoutAidesInput
  frequence: EnumAideFrequence
  infosCrediteur: String
  montant: Float
  nombreVersements: Float
  reetudier: Boolean
  remarque: String
  status: EnumAideStatus
  suspendue: Boolean
  typeField: EnumAideTypeField
  versements: VersementUpdateManyWithoutAidesInput
}

input AideUpdateManyWithoutContactsInput {
  connect: [AideWhereUniqueInput!]
  disconnect: [AideWhereUniqueInput!]
  set: [AideWhereUniqueInput!]
}

input AideUpdateManyWithoutDemandesInput {
  connect: [AideWhereUniqueInput!]
  disconnect: [AideWhereUniqueInput!]
  set: [AideWhereUniqueInput!]
}

input AideWhereInput {
  contact: ContactWhereUniqueInput
  createdAt: DateTimeFilter
  crediteur: EnumAideCrediteur
  dateAide: DateTimeNullableFilter
  dateExpiration: DateTimeNullableFilter
  demande: DemandeWhereUniqueInput
  demandeActivities: DemandeActivityListRelationFilter
  documents: DocumentListRelationFilter
  frequence: EnumAideFrequence
  id: IntFilter
  infosCrediteur: StringNullableFilter
  montant: IntNullableFilter
  nombreVersements: IntNullableFilter
  reetudier: BooleanFilter
  remarque: StringNullableFilter
  status: EnumAideStatus
  suspendue: BooleanNullableFilter
  typeField: EnumAideTypeField
  updatedAt: DateTimeFilter
  versements: VersementListRelationFilter
}

input AideWhereUniqueInput {
  id: Float!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

type Contact {
  adresse: String
  age: Float
  aides(orderBy: [AideOrderByInput!], skip: Float, take: Float, where: AideWhereInput): [Aide!]!
  codePostal: Float
  createdAt: DateTime!
  dateCreation: DateTime
  dateVisite: DateTime
  demandes(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  email: String
  id: Float!
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  updatedAt: DateTime!
  ville: String
}

input ContactCreateInput {
  adresse: String
  age: Float
  aides: AideCreateNestedManyWithoutContactsInput
  codePostal: Float
  dateCreation: DateTime
  dateVisite: DateTime
  demandes: DemandeCreateNestedManyWithoutContactsInput
  documents: DocumentCreateNestedManyWithoutContactsInput
  email: String
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  ville: String
}

input ContactOrderByInput {
  adresse: SortOrder
  age: SortOrder
  codePostal: SortOrder
  createdAt: SortOrder
  dateCreation: SortOrder
  dateVisite: SortOrder
  email: SortOrder
  id: SortOrder
  nom: SortOrder
  numBeneficiaire: SortOrder
  prenom: SortOrder
  remarques: SortOrder
  status: SortOrder
  telephone: SortOrder
  updatedAt: SortOrder
  ville: SortOrder
}

input ContactUpdateInput {
  adresse: String
  age: Float
  aides: AideUpdateManyWithoutContactsInput
  codePostal: Float
  dateCreation: DateTime
  dateVisite: DateTime
  demandes: DemandeUpdateManyWithoutContactsInput
  documents: DocumentUpdateManyWithoutContactsInput
  email: String
  nom: String
  numBeneficiaire: String
  prenom: String
  remarques: String
  status: String
  telephone: String
  ville: String
}

input ContactWhereInput {
  adresse: StringNullableFilter
  age: IntNullableFilter
  aides: AideListRelationFilter
  codePostal: IntNullableFilter
  createdAt: DateTimeFilter
  dateCreation: DateTimeNullableFilter
  dateVisite: DateTimeNullableFilter
  demandes: DemandeListRelationFilter
  documents: DocumentListRelationFilter
  email: StringNullableFilter
  id: IntFilter
  nom: StringNullableFilter
  numBeneficiaire: StringNullableFilter
  prenom: StringNullableFilter
  remarques: StringNullableFilter
  status: StringNullableFilter
  telephone: StringNullableFilter
  ville: StringNullableFilter
}

input ContactWhereUniqueInput {
  id: Float!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Demande {
  acteur: User
  agesEnfants: String
  aides(orderBy: [AideOrderByInput!], skip: Float, take: Float, where: AideWhereInput): [Aide!]!
  apl: Float
  autresAides: String
  autresCharges: Float
  categorieDemandeur: EnumDemandeCategorieDemandeur
  contact: Contact
  createdAt: DateTime
  dateVisite: DateTime
  demandeActivities(orderBy: [DemandeActivityOrderByInput!], skip: Float, take: Float, where: DemandeActivityWhereInput): [DemandeActivity!]!
  demandeStatusHistories(orderBy: [DemandeStatusHistoryOrderByInput!], skip: Float, take: Float, where: DemandeStatusHistoryWhereInput): [DemandeStatusHistory!]!
  dernierContact: DateTime
  derniereRelance: DateTime
  dettes: Float
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  facturesEnergie: Float
  id: Float!
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  nombreRelances: Float
  proprietaire: User
  recommandation: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
  updatedAt: DateTime!
  visites(orderBy: [VisiteOrderByInput!], skip: Float, take: Float, where: VisiteWhereInput): [Visite!]!
}

type DemandeActivity {
  aide: Aide
  createdAt: DateTime!
  demande: Demande
  id: Float!
  message: String
  titre: String!
  typeField: String!
  updatedAt: DateTime!
  user: User
}

input DemandeActivityCreateInput {
  aide: AideWhereUniqueInput
  demande: DemandeWhereUniqueInput!
  message: String
  titre: String!
  typeField: String!
  user: UserWhereUniqueInput
}

input DemandeActivityCreateNestedManyWithoutAidesInput {
  connect: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityCreateNestedManyWithoutDemandesInput {
  connect: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityCreateNestedManyWithoutUsersInput {
  connect: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityListRelationFilter {
  every: DemandeActivityWhereInput
  none: DemandeActivityWhereInput
  some: DemandeActivityWhereInput
}

input DemandeActivityOrderByInput {
  aideId: SortOrder
  createdAt: SortOrder
  demandeId: SortOrder
  id: SortOrder
  message: SortOrder
  titre: SortOrder
  typeField: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input DemandeActivityUpdateInput {
  aide: AideWhereUniqueInput
  demande: DemandeWhereUniqueInput
  message: String
  titre: String
  typeField: String
  user: UserWhereUniqueInput
}

input DemandeActivityUpdateManyWithoutAidesInput {
  connect: [DemandeActivityWhereUniqueInput!]
  disconnect: [DemandeActivityWhereUniqueInput!]
  set: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityUpdateManyWithoutDemandesInput {
  connect: [DemandeActivityWhereUniqueInput!]
  disconnect: [DemandeActivityWhereUniqueInput!]
  set: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityUpdateManyWithoutUsersInput {
  connect: [DemandeActivityWhereUniqueInput!]
  disconnect: [DemandeActivityWhereUniqueInput!]
  set: [DemandeActivityWhereUniqueInput!]
}

input DemandeActivityWhereInput {
  aide: AideWhereUniqueInput
  demande: DemandeWhereUniqueInput
  id: IntFilter
  message: StringNullableFilter
  titre: StringFilter
  typeField: StringFilter
  user: UserWhereUniqueInput
}

input DemandeActivityWhereUniqueInput {
  id: Float!
}

input DemandeCreateInput {
  acteur: UserWhereUniqueInput
  agesEnfants: String
  aides: AideCreateNestedManyWithoutDemandesInput
  apl: Float
  autresAides: String
  autresCharges: Float
  categorieDemandeur: EnumDemandeCategorieDemandeur
  contact: ContactWhereUniqueInput!
  dateVisite: DateTime
  demandeActivities: DemandeActivityCreateNestedManyWithoutDemandesInput
  demandeStatusHistories: DemandeStatusHistoryCreateNestedManyWithoutDemandesInput
  dernierContact: DateTime
  derniereRelance: DateTime
  dettes: Float
  documents: DocumentCreateNestedManyWithoutDemandesInput
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  nombreRelances: Float
  proprietaire: UserWhereUniqueInput
  recommandation: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
  visites: VisiteCreateNestedManyWithoutDemandesInput
}

input DemandeCreateNestedManyWithoutContactsInput {
  connect: [DemandeWhereUniqueInput!]
}

input DemandeCreateNestedManyWithoutUsersInput {
  connect: [DemandeWhereUniqueInput!]
}

input DemandeListRelationFilter {
  every: DemandeWhereInput
  none: DemandeWhereInput
  some: DemandeWhereInput
}

input DemandeOrderByInput {
  acteurId: SortOrder
  agesEnfants: SortOrder
  apl: SortOrder
  autresAides: SortOrder
  autresCharges: SortOrder
  categorieDemandeur: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
  dateVisite: SortOrder
  dernierContact: SortOrder
  derniereRelance: SortOrder
  dettes: SortOrder
  facturesEnergie: SortOrder
  id: SortOrder
  loyer: SortOrder
  natureDettes: SortOrder
  nombreEnfants: SortOrder
  nombreRelances: SortOrder
  proprietaireId: SortOrder
  recommandation: SortOrder
  remarques: SortOrder
  revenus: SortOrder
  revenusConjoint: SortOrder
  situationFamiliale: SortOrder
  situationProConjoint: SortOrder
  situationProfessionnelle: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type DemandeStatusHistory {
  createdAt: DateTime!
  id: Float!
  status: String!
  updatedAt: DateTime!
}

input DemandeStatusHistoryCreateNestedManyWithoutDemandesInput {
  connect: [DemandeStatusHistoryWhereUniqueInput!]
}

input DemandeStatusHistoryListRelationFilter {
  every: DemandeStatusHistoryWhereInput
  none: DemandeStatusHistoryWhereInput
  some: DemandeStatusHistoryWhereInput
}

input DemandeStatusHistoryOrderByInput {
  createdAt: SortOrder
  demandeId: SortOrder
  id: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input DemandeStatusHistoryUpdateManyWithoutDemandesInput {
  connect: [DemandeStatusHistoryWhereUniqueInput!]
  disconnect: [DemandeStatusHistoryWhereUniqueInput!]
  set: [DemandeStatusHistoryWhereUniqueInput!]
}

input DemandeStatusHistoryWhereInput {
  demande: DemandeWhereUniqueInput
  id: IntFilter
  status: StringFilter
}

input DemandeStatusHistoryWhereUniqueInput {
  id: Float!
}

input DemandeUpdateInput {
  acteur: UserWhereUniqueInput
  agesEnfants: String
  aides: AideUpdateManyWithoutDemandesInput
  apl: Float
  autresAides: String
  autresCharges: Float
  categorieDemandeur: EnumDemandeCategorieDemandeur
  contact: ContactWhereUniqueInput
  dateVisite: DateTime
  demandeActivities: DemandeActivityUpdateManyWithoutDemandesInput
  demandeStatusHistories: DemandeStatusHistoryUpdateManyWithoutDemandesInput
  dernierContact: DateTime
  derniereRelance: DateTime
  dettes: Float
  documents: DocumentUpdateManyWithoutDemandesInput
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nombreEnfants: Float
  nombreRelances: Float
  proprietaire: UserWhereUniqueInput
  recommandation: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: String
  visites: VisiteUpdateManyWithoutDemandesInput
}

input DemandeUpdateManyWithoutContactsInput {
  connect: [DemandeWhereUniqueInput!]
  disconnect: [DemandeWhereUniqueInput!]
  set: [DemandeWhereUniqueInput!]
}

input DemandeUpdateManyWithoutUsersInput {
  connect: [DemandeWhereUniqueInput!]
  disconnect: [DemandeWhereUniqueInput!]
  set: [DemandeWhereUniqueInput!]
}

input DemandeWhereInput {
  acteur: UserWhereUniqueInput
  agesEnfants: StringNullableFilter
  aides: AideListRelationFilter
  apl: IntNullableFilter
  autresAides: StringNullableFilter
  autresCharges: IntNullableFilter
  categorieDemandeur: EnumDemandeCategorieDemandeur
  contact: ContactWhereUniqueInput
  createdAt: DateTimeNullableFilter
  dateVisite: DateTimeNullableFilter
  demandeActivities: DemandeActivityListRelationFilter
  demandeStatusHistories: DemandeStatusHistoryListRelationFilter
  dernierContact: DateTimeNullableFilter
  derniereRelance: DateTimeNullableFilter
  dettes: IntNullableFilter
  documents: DocumentListRelationFilter
  facturesEnergie: IntNullableFilter
  id: IntFilter
  loyer: IntNullableFilter
  natureDettes: StringNullableFilter
  nombreEnfants: IntNullableFilter
  nombreRelances: IntNullableFilter
  recommandation: StringNullableFilter
  remarques: StringNullableFilter
  revenus: IntNullableFilter
  revenusConjoint: IntNullableFilter
  situationFamiliale: StringNullableFilter
  situationProConjoint: StringNullableFilter
  situationProfessionnelle: StringNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeFilter
  visites: VisiteListRelationFilter
}

input DemandeWhereUniqueInput {
  id: Float!
}

type Document {
  aide: Aide
  contact: Contact
  contenu: JSON
  createdAt: DateTime!
  demande: Demande
  id: String!
  name: String
  typeDocument: TypeDocument
  updatedAt: DateTime!
  versements: Versement
  visites: Visite
}

input DocumentCreateInput {
  aide: AideWhereUniqueInput
  contact: ContactWhereUniqueInput
  contenu: JSON
  demande: DemandeWhereUniqueInput
  name: String
  typeDocument: TypeDocumentWhereUniqueInput
  versements: VersementWhereUniqueInput
  visites: VisiteWhereUniqueInput
}

input DocumentCreateNestedManyWithoutAidesInput {
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateNestedManyWithoutContactsInput {
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateNestedManyWithoutDemandesInput {
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateNestedManyWithoutTypeDocumentsInput {
  connect: [DocumentWhereUniqueInput!]
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  none: DocumentWhereInput
  some: DocumentWhereInput
}

input DocumentOrderByInput {
  aideId: SortOrder
  contactId: SortOrder
  contenu: SortOrder
  createdAt: SortOrder
  demandeId: SortOrder
  id: SortOrder
  name: SortOrder
  typeDocumentId: SortOrder
  updatedAt: SortOrder
  versementsId: SortOrder
}

input DocumentUpdateInput {
  aide: AideWhereUniqueInput
  contact: ContactWhereUniqueInput
  contenu: JSON
  demande: DemandeWhereUniqueInput
  name: String
  typeDocument: TypeDocumentWhereUniqueInput
  versements: VersementWhereUniqueInput
  visites: VisiteWhereUniqueInput
}

input DocumentUpdateManyWithoutAidesInput {
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
}

input DocumentUpdateManyWithoutContactsInput {
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
}

input DocumentUpdateManyWithoutDemandesInput {
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
}

input DocumentUpdateManyWithoutTypeDocumentsInput {
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
}

input DocumentWhereInput {
  aide: AideWhereUniqueInput
  contact: ContactWhereUniqueInput
  contenu: JsonFilter
  demande: DemandeWhereUniqueInput
  id: StringFilter
  name: StringNullableFilter
  typeDocument: TypeDocumentWhereUniqueInput
  versements: VersementWhereUniqueInput
  visites: VisiteWhereUniqueInput
}

input DocumentWhereUniqueInput {
  id: String!
}

enum EnumAideCrediteur {
  LeBNFiciaire
  UnCrAncier
}

enum EnumAideFrequence {
  BiMensuelle
  Hebdomadaire
  Mensuelle
  Trimestrielle
  UneFois
}

enum EnumAideStatus {
  EnCours
  Expir
}

enum EnumAideTypeField {
  AssistanceAdministrative
  FinanciRe
}

enum EnumDemandeCategorieDemandeur {
  LourdementEndett
  NCessiteux
  Pauvre
}

enum EnumTypeDocumentRattachement {
  Aide
  Contact
  Demande
  Suivi
}

enum EnumUserNotificationPreferenceTypeField {
  AideExpir
  ContactBan
  DemandeAffecte
  DemandeEnCommission
  DemandeEnVisite
  ErreursDemandes
  NouvelleDemande
}

enum EnumVersementStatus {
  AVerser
  Verse
}

enum EnumVisiteStatus {
  Annulee
  Planifiee
  Programee
  Realisee
}

enum EnumWebsiteDemandeStatus {
  EnCours
  EnErreur
  ReUe
  Trait
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Invitation {
  createdAt: DateTime!
  email: String!
  id: String!
  message: String
  role: String!
  token: String!
  updatedAt: DateTime!
  used: Boolean!
}

input InvitationCreateInput {
  email: String!
  message: String
  role: String!
  token: String!
  used: Boolean!
}

input InvitationOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  message: SortOrder
  role: SortOrder
  token: SortOrder
  updatedAt: SortOrder
  used: SortOrder
}

input InvitationUpdateInput {
  email: String
  message: String
  role: String
  token: String
  used: Boolean
}

input InvitationWhereInput {
  email: StringFilter
  id: StringFilter
  message: StringNullableFilter
  role: StringFilter
  token: StringFilter
  used: BooleanFilter
}

input InvitationWhereUniqueInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAide(data: AideCreateInput!): Aide!
  createContact(data: ContactCreateInput!): Contact!
  createDemande(data: DemandeCreateInput!): Demande!
  createDemandeActivity(data: DemandeActivityCreateInput!): DemandeActivity!
  createDocument(data: DocumentCreateInput!): Document!
  createInvitation(data: InvitationCreateInput!): Invitation!
  createTypeDocument(data: TypeDocumentCreateInput!): TypeDocument!
  createUser(data: UserCreateInput!): User!
  createUserNotificationPreference(data: UserNotificationPreferenceCreateInput!): UserNotificationPreference!
  createVersement(data: VersementCreateInput!): Versement!
  createVisite(data: VisiteCreateInput!): Visite!
  createWebsiteDemande(data: WebsiteDemandeCreateInput!): WebsiteDemande!
  deleteAide(where: AideWhereUniqueInput!): Aide!
  deleteContact(where: ContactWhereUniqueInput!): Contact!
  deleteContenu(where: DocumentWhereUniqueInput!): Document!
  deleteDemande(where: DemandeWhereUniqueInput!): Demande!
  deleteDemandeActivity(where: DemandeActivityWhereUniqueInput!): DemandeActivity!
  deleteDocument(where: DocumentWhereUniqueInput!): Document!
  deleteInvitation(where: InvitationWhereUniqueInput!): Invitation!
  deleteTypeDocument(where: TypeDocumentWhereUniqueInput!): TypeDocument!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUserNotificationPreference(where: UserNotificationPreferenceWhereUniqueInput!): UserNotificationPreference!
  deleteVersement(where: VersementWhereUniqueInput!): Versement!
  deleteVisite(where: VisiteWhereUniqueInput!): Visite!
  deleteWebsiteDemande(where: WebsiteDemandeWhereUniqueInput!): WebsiteDemande!
  login(credentials: Credentials!): UserInfo!
  updateAide(data: AideUpdateInput!, where: AideWhereUniqueInput!): Aide!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact!
  updateDemande(data: DemandeUpdateInput!, where: DemandeWhereUniqueInput!): Demande!
  updateDemandeActivity(data: DemandeActivityUpdateInput!, where: DemandeActivityWhereUniqueInput!): DemandeActivity!
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document!
  updateInvitation(data: InvitationUpdateInput!, where: InvitationWhereUniqueInput!): Invitation!
  updateTypeDocument(data: TypeDocumentUpdateInput!, where: TypeDocumentWhereUniqueInput!): TypeDocument!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUserNotificationPreference(data: UserNotificationPreferenceUpdateInput!, where: UserNotificationPreferenceWhereUniqueInput!): UserNotificationPreference!
  updateVersement(data: VersementUpdateInput!, where: VersementWhereUniqueInput!): Versement!
  updateVisite(data: VisiteUpdateInput!, where: VisiteWhereUniqueInput!): Visite!
  updateWebsiteDemande(data: WebsiteDemandeUpdateInput!, where: WebsiteDemandeWhereUniqueInput!): WebsiteDemande!
  uploadContenu(file: Upload!, where: DocumentWhereUniqueInput!): Document!
}

type Query {
  _aidesMeta(where: AideWhereInput): MetaQueryPayload!
  _contactsMeta(where: ContactWhereInput): MetaQueryPayload!
  _demandeActivitiesMeta(where: DemandeActivityWhereInput): MetaQueryPayload!
  _demandesMeta(where: DemandeWhereInput): MetaQueryPayload!
  _documentsMeta(where: DocumentWhereInput): MetaQueryPayload!
  _invitationsMeta(where: InvitationWhereInput): MetaQueryPayload!
  _typeDocumentsMeta(where: TypeDocumentWhereInput): MetaQueryPayload!
  _userNotificationPreferencesMeta(where: UserNotificationPreferenceWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  _versementsMeta(where: VersementWhereInput): MetaQueryPayload!
  _visitesMeta(where: VisiteWhereInput): MetaQueryPayload!
  _websiteDemandesMeta(where: WebsiteDemandeWhereInput): MetaQueryPayload!
  aide(where: AideWhereUniqueInput!): Aide
  aides(orderBy: [AideOrderByInput!], skip: Float, take: Float, where: AideWhereInput): [Aide!]!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(orderBy: [ContactOrderByInput!], skip: Float, take: Float, where: ContactWhereInput): [Contact!]!
  demande(where: DemandeWhereUniqueInput!): Demande
  demandeActivities(orderBy: [DemandeActivityOrderByInput!], skip: Float, take: Float, where: DemandeActivityWhereInput): [DemandeActivity!]!
  demandeActivity(where: DemandeActivityWhereUniqueInput!): DemandeActivity
  demandes(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  document(where: DocumentWhereUniqueInput!): Document
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  invitation(where: InvitationWhereUniqueInput!): Invitation
  invitations(orderBy: [InvitationOrderByInput!], skip: Float, take: Float, where: InvitationWhereInput): [Invitation!]!
  typeDocument(where: TypeDocumentWhereUniqueInput!): TypeDocument
  typeDocuments(orderBy: [TypeDocumentOrderByInput!], skip: Float, take: Float, where: TypeDocumentWhereInput): [TypeDocument!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  userNotificationPreference(where: UserNotificationPreferenceWhereUniqueInput!): UserNotificationPreference
  userNotificationPreferences(orderBy: [UserNotificationPreferenceOrderByInput!], skip: Float, take: Float, where: UserNotificationPreferenceWhereInput): [UserNotificationPreference!]!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  versement(where: VersementWhereUniqueInput!): Versement
  versements(orderBy: [VersementOrderByInput!], skip: Float, take: Float, where: VersementWhereInput): [Versement!]!
  visite(where: VisiteWhereUniqueInput!): Visite
  visites(orderBy: [VisiteOrderByInput!], skip: Float, take: Float, where: VisiteWhereInput): [Visite!]!
  websiteDemande(where: WebsiteDemandeWhereUniqueInput!): WebsiteDemande
  websiteDemandes(orderBy: [WebsiteDemandeOrderByInput!], skip: Float, take: Float, where: WebsiteDemandeWhereInput): [WebsiteDemande!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type TypeDocument {
  createdAt: DateTime!
  documents(orderBy: [DocumentOrderByInput!], skip: Float, take: Float, where: DocumentWhereInput): [Document!]!
  id: Float!
  internalCode: String
  isInternal: Boolean!
  label: String!
  rattachement: EnumTypeDocumentRattachement
  updatedAt: DateTime!
}

input TypeDocumentCreateInput {
  documents: DocumentCreateNestedManyWithoutTypeDocumentsInput
  internalCode: String
  isInternal: Boolean!
  label: String!
  rattachement: EnumTypeDocumentRattachement!
}

input TypeDocumentOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  internalCode: SortOrder
  isInternal: SortOrder
  label: SortOrder
  rattachement: SortOrder
  updatedAt: SortOrder
}

input TypeDocumentUpdateInput {
  documents: DocumentUpdateManyWithoutTypeDocumentsInput
  internalCode: String
  isInternal: Boolean
  label: String
  rattachement: EnumTypeDocumentRattachement
}

input TypeDocumentWhereInput {
  documents: DocumentListRelationFilter
  id: IntFilter
  internalCode: StringNullableFilter
  isInternal: BooleanFilter
  label: StringFilter
  rattachement: EnumTypeDocumentRattachement
}

input TypeDocumentWhereUniqueInput {
  id: Float!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  adresseCodePostal: String
  adresseRue: String
  adresseVille: String
  createdAt: DateTime!
  demandeActivities(orderBy: [DemandeActivityOrderByInput!], skip: Float, take: Float, where: DemandeActivityWhereInput): [DemandeActivity!]!
  demandesActeurs(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  demandesEnPropriete(orderBy: [DemandeOrderByInput!], skip: Float, take: Float, where: DemandeWhereInput): [Demande!]!
  email: String
  firstName: String
  hasAccess: Boolean!
  id: String!
  lastName: String
  role: String
  roles: JSON!
  status: String
  subordonnes(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  superieur: User
  token: String
  updatedAt: DateTime!
  userNotificationPreferences(orderBy: [UserNotificationPreferenceOrderByInput!], skip: Float, take: Float, where: UserNotificationPreferenceWhereInput): [UserNotificationPreference!]!
  username: String!
  visites(orderBy: [VisiteOrderByInput!], skip: Float, take: Float, where: VisiteWhereInput): [Visite!]!
}

input UserCreateInput {
  adresseCodePostal: String
  adresseRue: String
  adresseVille: String
  demandeActivities: DemandeActivityCreateNestedManyWithoutUsersInput
  demandesActeurs: DemandeCreateNestedManyWithoutUsersInput
  demandesEnPropriete: DemandeCreateNestedManyWithoutUsersInput
  email: String
  firstName: String
  hasAccess: Boolean!
  lastName: String
  password: String!
  role: String
  roles: JSON!
  status: String
  subordonnes: UserCreateNestedManyWithoutUsersInput
  superieur: UserWhereUniqueInput
  token: String
  userNotificationPreferences: UserNotificationPreferenceCreateNestedManyWithoutUsersInput
  username: String!
  visites: VisiteCreateNestedManyWithoutUsersInput
}

input UserCreateNestedManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserNotificationPreference {
  active: Boolean!
  createdAt: DateTime!
  id: Float!
  typeField: EnumUserNotificationPreferenceTypeField
  updatedAt: DateTime!
  user: User
}

input UserNotificationPreferenceCreateInput {
  active: Boolean!
  typeField: EnumUserNotificationPreferenceTypeField!
  user: UserWhereUniqueInput!
}

input UserNotificationPreferenceCreateNestedManyWithoutUsersInput {
  connect: [UserNotificationPreferenceWhereUniqueInput!]
}

input UserNotificationPreferenceListRelationFilter {
  every: UserNotificationPreferenceWhereInput
  none: UserNotificationPreferenceWhereInput
  some: UserNotificationPreferenceWhereInput
}

input UserNotificationPreferenceOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  id: SortOrder
  typeField: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserNotificationPreferenceUpdateInput {
  active: Boolean
  typeField: EnumUserNotificationPreferenceTypeField
  user: UserWhereUniqueInput
}

input UserNotificationPreferenceUpdateManyWithoutUsersInput {
  connect: [UserNotificationPreferenceWhereUniqueInput!]
  disconnect: [UserNotificationPreferenceWhereUniqueInput!]
  set: [UserNotificationPreferenceWhereUniqueInput!]
}

input UserNotificationPreferenceWhereInput {
  active: BooleanFilter
  id: IntFilter
  typeField: EnumUserNotificationPreferenceTypeField
  user: UserWhereUniqueInput
}

input UserNotificationPreferenceWhereUniqueInput {
  id: Float!
}

input UserOrderByInput {
  adresseCodePostal: SortOrder
  adresseRue: SortOrder
  adresseVille: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  hasAccess: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
  roles: SortOrder
  status: SortOrder
  superieurId: SortOrder
  token: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  adresseCodePostal: String
  adresseRue: String
  adresseVille: String
  demandeActivities: DemandeActivityUpdateManyWithoutUsersInput
  demandesActeurs: DemandeUpdateManyWithoutUsersInput
  demandesEnPropriete: DemandeUpdateManyWithoutUsersInput
  email: String
  firstName: String
  hasAccess: Boolean
  lastName: String
  password: String
  role: String
  roles: JSON
  status: String
  subordonnes: UserUpdateManyWithoutUsersInput
  superieur: UserWhereUniqueInput
  token: String
  userNotificationPreferences: UserNotificationPreferenceUpdateManyWithoutUsersInput
  username: String
  visites: VisiteUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserWhereInput {
  adresseCodePostal: StringNullableFilter
  adresseRue: StringNullableFilter
  adresseVille: StringNullableFilter
  demandeActivities: DemandeActivityListRelationFilter
  demandesActeurs: DemandeListRelationFilter
  demandesEnPropriete: DemandeListRelationFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  hasAccess: BooleanFilter
  id: StringFilter
  lastName: StringNullableFilter
  role: StringNullableFilter
  status: StringNullableFilter
  subordonnes: UserListRelationFilter
  superieur: UserWhereUniqueInput
  token: StringNullableFilter
  userNotificationPreferences: UserNotificationPreferenceListRelationFilter
  username: StringFilter
  visites: VisiteListRelationFilter
}

input UserWhereUniqueInput {
  id: String!
}

type Versement {
  aide: Aide
  createdAt: DateTime!
  dataVersement: DateTime!
  document: Document
  id: Float!
  montant: Float!
  status: EnumVersementStatus
  updatedAt: DateTime!
}

input VersementCreateInput {
  aide: AideWhereUniqueInput!
  dataVersement: DateTime!
  document: DocumentWhereUniqueInput
  montant: Float!
  status: EnumVersementStatus!
}

input VersementCreateNestedManyWithoutAidesInput {
  connect: [VersementWhereUniqueInput!]
}

input VersementListRelationFilter {
  every: VersementWhereInput
  none: VersementWhereInput
  some: VersementWhereInput
}

input VersementOrderByInput {
  aideId: SortOrder
  createdAt: SortOrder
  dataVersement: SortOrder
  documentId: SortOrder
  id: SortOrder
  montant: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input VersementUpdateInput {
  aide: AideWhereUniqueInput
  dataVersement: DateTime
  document: DocumentWhereUniqueInput
  montant: Float
  status: EnumVersementStatus
}

input VersementUpdateManyWithoutAidesInput {
  connect: [VersementWhereUniqueInput!]
  disconnect: [VersementWhereUniqueInput!]
  set: [VersementWhereUniqueInput!]
}

input VersementWhereInput {
  aide: AideWhereUniqueInput
  dataVersement: DateTimeFilter
  document: DocumentWhereUniqueInput
  id: IntFilter
  montant: IntFilter
  status: EnumVersementStatus
}

input VersementWhereUniqueInput {
  id: Float!
}

type Visite {
  acteur: User
  createdAt: DateTime!
  dateVisite: DateTime
  demande: Demande
  document: Document
  id: Float!
  note: String
  status: EnumVisiteStatus
  updatedAt: DateTime!
}

input VisiteCreateInput {
  acteur: UserWhereUniqueInput!
  dateVisite: DateTime
  demande: DemandeWhereUniqueInput!
  document: DocumentWhereUniqueInput
  note: String
  status: EnumVisiteStatus
}

input VisiteCreateNestedManyWithoutDemandesInput {
  connect: [VisiteWhereUniqueInput!]
}

input VisiteCreateNestedManyWithoutUsersInput {
  connect: [VisiteWhereUniqueInput!]
}

input VisiteListRelationFilter {
  every: VisiteWhereInput
  none: VisiteWhereInput
  some: VisiteWhereInput
}

input VisiteOrderByInput {
  acteurId: SortOrder
  createdAt: SortOrder
  dateVisite: SortOrder
  demandeId: SortOrder
  documentId: SortOrder
  id: SortOrder
  note: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input VisiteUpdateInput {
  acteur: UserWhereUniqueInput
  dateVisite: DateTime
  demande: DemandeWhereUniqueInput
  document: DocumentWhereUniqueInput
  note: String
  status: EnumVisiteStatus
}

input VisiteUpdateManyWithoutDemandesInput {
  connect: [VisiteWhereUniqueInput!]
  disconnect: [VisiteWhereUniqueInput!]
  set: [VisiteWhereUniqueInput!]
}

input VisiteUpdateManyWithoutUsersInput {
  connect: [VisiteWhereUniqueInput!]
  disconnect: [VisiteWhereUniqueInput!]
  set: [VisiteWhereUniqueInput!]
}

input VisiteWhereInput {
  acteur: UserWhereUniqueInput
  dateVisite: DateTimeNullableFilter
  demande: DemandeWhereUniqueInput
  document: DocumentWhereUniqueInput
  id: IntFilter
  note: StringNullableFilter
  status: EnumVisiteStatus
}

input VisiteWhereUniqueInput {
  id: Float!
}

type WebsiteDemande {
  adresseDemandeur: String
  ageDemandeur: Float
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  codePostalDemandeur: Float
  createdAt: DateTime!
  dettes: Float
  emailDemandeur: String
  erreur: String
  facturesEnergie: Float
  id: String!
  loyer: Float
  natureDettes: String
  nomDemandeur: String
  nombreEnfants: Float
  prenomDemandeur: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: EnumWebsiteDemandeStatus
  telephoneDemandeur: String
  updatedAt: DateTime!
  villeDemandeur: String
}

input WebsiteDemandeCreateInput {
  adresseDemandeur: String
  ageDemandeur: Float
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  codePostalDemandeur: Float
  dettes: Float
  emailDemandeur: String
  erreur: String
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nomDemandeur: String
  nombreEnfants: Float
  prenomDemandeur: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: EnumWebsiteDemandeStatus!
  telephoneDemandeur: String
  villeDemandeur: String
}

input WebsiteDemandeOrderByInput {
  adresseDemandeur: SortOrder
  ageDemandeur: SortOrder
  agesEnfants: SortOrder
  apl: SortOrder
  autresAides: SortOrder
  autresCharges: SortOrder
  codePostalDemandeur: SortOrder
  createdAt: SortOrder
  dettes: SortOrder
  emailDemandeur: SortOrder
  erreur: SortOrder
  facturesEnergie: SortOrder
  id: SortOrder
  loyer: SortOrder
  natureDettes: SortOrder
  nomDemandeur: SortOrder
  nombreEnfants: SortOrder
  prenomDemandeur: SortOrder
  remarques: SortOrder
  revenus: SortOrder
  revenusConjoint: SortOrder
  situationFamiliale: SortOrder
  situationProConjoint: SortOrder
  situationProfessionnelle: SortOrder
  status: SortOrder
  telephoneDemandeur: SortOrder
  updatedAt: SortOrder
  villeDemandeur: SortOrder
}

input WebsiteDemandeUpdateInput {
  adresseDemandeur: String
  ageDemandeur: Float
  agesEnfants: String
  apl: Float
  autresAides: String
  autresCharges: Float
  codePostalDemandeur: Float
  dettes: Float
  emailDemandeur: String
  erreur: String
  facturesEnergie: Float
  loyer: Float
  natureDettes: String
  nomDemandeur: String
  nombreEnfants: Float
  prenomDemandeur: String
  remarques: String
  revenus: Float
  revenusConjoint: Float
  situationFamiliale: String
  situationProConjoint: String
  situationProfessionnelle: String
  status: EnumWebsiteDemandeStatus
  telephoneDemandeur: String
  villeDemandeur: String
}

input WebsiteDemandeWhereInput {
  adresseDemandeur: StringNullableFilter
  ageDemandeur: IntNullableFilter
  agesEnfants: StringNullableFilter
  apl: IntNullableFilter
  autresAides: StringNullableFilter
  autresCharges: IntNullableFilter
  codePostalDemandeur: IntNullableFilter
  dettes: IntNullableFilter
  emailDemandeur: StringNullableFilter
  erreur: StringNullableFilter
  facturesEnergie: IntNullableFilter
  id: StringFilter
  loyer: IntNullableFilter
  natureDettes: StringNullableFilter
  nomDemandeur: StringNullableFilter
  nombreEnfants: IntNullableFilter
  prenomDemandeur: StringNullableFilter
  remarques: StringNullableFilter
  revenus: IntNullableFilter
  revenusConjoint: IntNullableFilter
  situationFamiliale: StringNullableFilter
  situationProConjoint: StringNullableFilter
  situationProfessionnelle: StringNullableFilter
  status: EnumWebsiteDemandeStatus
  telephoneDemandeur: StringNullableFilter
  villeDemandeur: StringNullableFilter
}

input WebsiteDemandeWhereUniqueInput {
  id: String!
}